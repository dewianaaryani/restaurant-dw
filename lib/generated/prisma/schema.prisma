// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?   @db.VarChar(255)
  role          Role      @default(customer)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @updatedAt @db.Timestamp(6)

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // Restaurant app relations
  favorites      Favorite[]
  ratings        Rating[]
  Order          Order[]
  customerOrders Order[]    @relation("CustomerOrders")
  kasirOrders    Order[]    @relation("KasirOrders")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Restaurant Management Models

model Order {
  id             String        @id @default(cuid())
  customer_id    String
  table_number   Int
  order_status   OrderStatus   @default(pending)
  payment_status PaymentStatus @default(pending)
  total_amount   Int
  order_time     DateTime      @db.Timestamp(6)
  completed_time DateTime?     @db.Timestamp(6)
  kasir_id       String?
  created_at     DateTime      @default(now()) @db.Timestamp(6)
  updated_at     DateTime      @updatedAt @db.Timestamp(6)

  // Relations (pakai nama relasi unik)
  customer User  @relation("CustomerOrders", fields: [customer_id], references: [id], onDelete: Cascade)
  kasir    User? @relation("KasirOrders", fields: [kasir_id], references: [id], onDelete: Cascade)

  order_items OrderItem[]
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?

  @@map("orders")
}

model OrderItem {
  id            String   @id @default(cuid())
  order_id      String
  menu_id       String
  price         Int
  quantity      Int
  subtotal      Int
  customization String?  @db.Text
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @updatedAt @db.Timestamp(6)

  // Relations
  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
  menu  Menu  @relation(fields: [menu_id], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Category {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(255)
  desc       String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  // Relations
  menus Menu[]

  @@map("categories")
}

model Menu {
  id           String   @id @default(cuid())
  category_id  String
  name         String   @db.VarChar(255)
  desc         String?  @db.Text
  image        String?  @db.VarChar(255)
  is_available Boolean  @default(true)
  price        Int
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @updatedAt @db.Timestamp(6)

  // Relations
  category    Category    @relation(fields: [category_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]
  favorites   Favorite[]
  ratings     Rating[]

  @@map("menus")
}

model Favorite {
  id          String   @id @default(cuid())
  customer_id String
  menu_id     String
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt @db.Timestamp(6)

  // Relations
  customer User @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  menu     Menu @relation(fields: [menu_id], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate favorites
  @@unique([customer_id, menu_id])
  @@map("favorites")
}

model Rating {
  id          String   @id @default(cuid())
  customer_id String
  menu_id     String
  rating      Int      @db.SmallInt
  review      String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt @db.Timestamp(6)

  // Relations
  customer User @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  menu     Menu @relation(fields: [menu_id], references: [id], onDelete: Cascade)

  @@map("ratings")
}

enum OrderStatus {
  completed
  ready
  cooking
  pending
}

enum PaymentStatus {
  paid
  pending
}

enum Role {
  admin
  cashier
  kitchen
  customer
}
